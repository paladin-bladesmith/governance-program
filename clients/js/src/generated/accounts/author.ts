/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';

export type Author = { activeProposals: bigint };

export type AuthorArgs = { activeProposals: number | bigint };

export function getAuthorEncoder(): Encoder<AuthorArgs> {
  return getStructEncoder([['activeProposals', getU64Encoder()]]);
}

export function getAuthorDecoder(): Decoder<Author> {
  return getStructDecoder([['activeProposals', getU64Decoder()]]);
}

export function getAuthorCodec(): Codec<AuthorArgs, Author> {
  return combineCodec(getAuthorEncoder(), getAuthorDecoder());
}

export function decodeAuthor<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Author, TAddress>;
export function decodeAuthor<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Author, TAddress>;
export function decodeAuthor<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Author, TAddress> | MaybeAccount<Author, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAuthorDecoder()
  );
}

export async function fetchAuthor<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Author, TAddress>> {
  const maybeAccount = await fetchMaybeAuthor(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAuthor<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Author, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAuthor(maybeAccount);
}

export async function fetchAllAuthor(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Author>[]> {
  const maybeAccounts = await fetchAllMaybeAuthor(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAuthor(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Author>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAuthor(maybeAccount));
}

export function getAuthorSize(): number {
  return 8;
}
