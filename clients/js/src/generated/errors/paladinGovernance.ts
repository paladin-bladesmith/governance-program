/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { PALADIN_GOVERNANCE_PROGRAM_ADDRESS } from '../programs';

/** StakeConfigMismatch: Stake config accounts mismatch. */
export const PALADIN_GOVERNANCE_ERROR__STAKE_CONFIG_MISMATCH = 0x0; // 0
/** IncorrectStakeConfig: Incorrect stake config. */
export const PALADIN_GOVERNANCE_ERROR__INCORRECT_STAKE_CONFIG = 0x1; // 1
/** IncorrectProposalTransactionAddress: Incorrect proposal transaction address. */
export const PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_TRANSACTION_ADDRESS = 0x2; // 2
/** IncorrectProposalVoteAddress: Incorrect proposal vote address. */
export const PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_VOTE_ADDRESS = 0x3; // 3
/** IncorrectProposalAddress: Incorrect proposal address. */
export const PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_ADDRESS = 0x4; // 4
/** IncorrectGovernanceConfigAddress: Incorrect governance config address. */
export const PALADIN_GOVERNANCE_ERROR__INCORRECT_GOVERNANCE_CONFIG_ADDRESS = 0x5; // 5
/** IncorrectTreasuryAddress: Incorrect treasury address. */
export const PALADIN_GOVERNANCE_ERROR__INCORRECT_TREASURY_ADDRESS = 0x6; // 6
/** ProposalNotInVotingStage: Proposal not in voting stage. */
export const PALADIN_GOVERNANCE_ERROR__PROPOSAL_NOT_IN_VOTING_STAGE = 0x7; // 7
/** ProposalIsImmutable: Proposal is immutable. */
export const PALADIN_GOVERNANCE_ERROR__PROPOSAL_IS_IMMUTABLE = 0x8; // 8
/** ProposalIsActive: Proposal is active. */
export const PALADIN_GOVERNANCE_ERROR__PROPOSAL_IS_ACTIVE = 0x9; // 9
/** ProposalNotAccepted: Proposal not accepted. */
export const PALADIN_GOVERNANCE_ERROR__PROPOSAL_NOT_ACCEPTED = 0xa; // 10
/** ProposalVotingPeriodStillActive: Proposal voting period still active. */
export const PALADIN_GOVERNANCE_ERROR__PROPOSAL_VOTING_PERIOD_STILL_ACTIVE = 0xb; // 11
/** InvalidTransactionIndex: Invalid transaction index. */
export const PALADIN_GOVERNANCE_ERROR__INVALID_TRANSACTION_INDEX = 0xc; // 12
/** InstructionAlreadyExecuted: Instruction already executed. */
export const PALADIN_GOVERNANCE_ERROR__INSTRUCTION_ALREADY_EXECUTED = 0xd; // 13
/** PreviousInstructionHasNotBeenExecuted: Previous instruction has not been executed. */
export const PALADIN_GOVERNANCE_ERROR__PREVIOUS_INSTRUCTION_HAS_NOT_BEEN_EXECUTED = 0xe; // 14
/** TooManyActiveProposals: Author has too many active proposals. */
export const PALADIN_GOVERNANCE_ERROR__TOO_MANY_ACTIVE_PROPOSALS = 0xf; // 15
/** CooldownPeriodNotOver: Cooldown period is not over yet, cannot create new proposal. */
export const PALADIN_GOVERNANCE_ERROR__COOLDOWN_PERIOD_NOT_OVER = 0x10; // 16

export type PaladinGovernanceError =
  | typeof PALADIN_GOVERNANCE_ERROR__COOLDOWN_PERIOD_NOT_OVER
  | typeof PALADIN_GOVERNANCE_ERROR__INCORRECT_GOVERNANCE_CONFIG_ADDRESS
  | typeof PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_ADDRESS
  | typeof PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_TRANSACTION_ADDRESS
  | typeof PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_VOTE_ADDRESS
  | typeof PALADIN_GOVERNANCE_ERROR__INCORRECT_STAKE_CONFIG
  | typeof PALADIN_GOVERNANCE_ERROR__INCORRECT_TREASURY_ADDRESS
  | typeof PALADIN_GOVERNANCE_ERROR__INSTRUCTION_ALREADY_EXECUTED
  | typeof PALADIN_GOVERNANCE_ERROR__INVALID_TRANSACTION_INDEX
  | typeof PALADIN_GOVERNANCE_ERROR__PREVIOUS_INSTRUCTION_HAS_NOT_BEEN_EXECUTED
  | typeof PALADIN_GOVERNANCE_ERROR__PROPOSAL_IS_ACTIVE
  | typeof PALADIN_GOVERNANCE_ERROR__PROPOSAL_IS_IMMUTABLE
  | typeof PALADIN_GOVERNANCE_ERROR__PROPOSAL_NOT_ACCEPTED
  | typeof PALADIN_GOVERNANCE_ERROR__PROPOSAL_NOT_IN_VOTING_STAGE
  | typeof PALADIN_GOVERNANCE_ERROR__PROPOSAL_VOTING_PERIOD_STILL_ACTIVE
  | typeof PALADIN_GOVERNANCE_ERROR__STAKE_CONFIG_MISMATCH
  | typeof PALADIN_GOVERNANCE_ERROR__TOO_MANY_ACTIVE_PROPOSALS;

let paladinGovernanceErrorMessages:
  | Record<PaladinGovernanceError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  paladinGovernanceErrorMessages = {
    [PALADIN_GOVERNANCE_ERROR__COOLDOWN_PERIOD_NOT_OVER]: `Cooldown period is not over yet, cannot create new proposal.`,
    [PALADIN_GOVERNANCE_ERROR__INCORRECT_GOVERNANCE_CONFIG_ADDRESS]: `Incorrect governance config address.`,
    [PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_ADDRESS]: `Incorrect proposal address.`,
    [PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_TRANSACTION_ADDRESS]: `Incorrect proposal transaction address.`,
    [PALADIN_GOVERNANCE_ERROR__INCORRECT_PROPOSAL_VOTE_ADDRESS]: `Incorrect proposal vote address.`,
    [PALADIN_GOVERNANCE_ERROR__INCORRECT_STAKE_CONFIG]: `Incorrect stake config.`,
    [PALADIN_GOVERNANCE_ERROR__INCORRECT_TREASURY_ADDRESS]: `Incorrect treasury address.`,
    [PALADIN_GOVERNANCE_ERROR__INSTRUCTION_ALREADY_EXECUTED]: `Instruction already executed.`,
    [PALADIN_GOVERNANCE_ERROR__INVALID_TRANSACTION_INDEX]: `Invalid transaction index.`,
    [PALADIN_GOVERNANCE_ERROR__PREVIOUS_INSTRUCTION_HAS_NOT_BEEN_EXECUTED]: `Previous instruction has not been executed.`,
    [PALADIN_GOVERNANCE_ERROR__PROPOSAL_IS_ACTIVE]: `Proposal is active.`,
    [PALADIN_GOVERNANCE_ERROR__PROPOSAL_IS_IMMUTABLE]: `Proposal is immutable.`,
    [PALADIN_GOVERNANCE_ERROR__PROPOSAL_NOT_ACCEPTED]: `Proposal not accepted.`,
    [PALADIN_GOVERNANCE_ERROR__PROPOSAL_NOT_IN_VOTING_STAGE]: `Proposal not in voting stage.`,
    [PALADIN_GOVERNANCE_ERROR__PROPOSAL_VOTING_PERIOD_STILL_ACTIVE]: `Proposal voting period still active.`,
    [PALADIN_GOVERNANCE_ERROR__STAKE_CONFIG_MISMATCH]: `Stake config accounts mismatch.`,
    [PALADIN_GOVERNANCE_ERROR__TOO_MANY_ACTIVE_PROPOSALS]: `Author has too many active proposals.`,
  };
}

export function getPaladinGovernanceErrorMessage(
  code: PaladinGovernanceError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      paladinGovernanceErrorMessages as Record<PaladinGovernanceError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isPaladinGovernanceError<
  TProgramErrorCode extends PaladinGovernanceError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
    code
  );
}
