/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_GOVERNANCE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type InitializeGovernanceInstruction<
  TProgram extends string = typeof PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountGovernanceConfig extends string | IAccountMeta<string> = string,
  TAccountStakeConfig extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountGovernanceConfig extends string
        ? WritableAccount<TAccountGovernanceConfig>
        : TAccountGovernanceConfig,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeGovernanceInstructionData = {
  discriminator: number;
  governanceId: bigint;
  cooldownPeriodSeconds: bigint;
  proposalMinimumQuorum: number;
  proposalPassThreshold: number;
  votingPeriodSeconds: bigint;
  stakePerProposal: bigint;
};

export type InitializeGovernanceInstructionDataArgs = {
  governanceId: number | bigint;
  cooldownPeriodSeconds: number | bigint;
  proposalMinimumQuorum: number;
  proposalPassThreshold: number;
  votingPeriodSeconds: number | bigint;
  stakePerProposal: number | bigint;
};

export function getInitializeGovernanceInstructionDataEncoder(): Encoder<InitializeGovernanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['governanceId', getU64Encoder()],
      ['cooldownPeriodSeconds', getU64Encoder()],
      ['proposalMinimumQuorum', getU32Encoder()],
      ['proposalPassThreshold', getU32Encoder()],
      ['votingPeriodSeconds', getU64Encoder()],
      ['stakePerProposal', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 9 })
  );
}

export function getInitializeGovernanceInstructionDataDecoder(): Decoder<InitializeGovernanceInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['governanceId', getU64Decoder()],
    ['cooldownPeriodSeconds', getU64Decoder()],
    ['proposalMinimumQuorum', getU32Decoder()],
    ['proposalPassThreshold', getU32Decoder()],
    ['votingPeriodSeconds', getU64Decoder()],
    ['stakePerProposal', getU64Decoder()],
  ]);
}

export function getInitializeGovernanceInstructionDataCodec(): Codec<
  InitializeGovernanceInstructionDataArgs,
  InitializeGovernanceInstructionData
> {
  return combineCodec(
    getInitializeGovernanceInstructionDataEncoder(),
    getInitializeGovernanceInstructionDataDecoder()
  );
}

export type InitializeGovernanceInput<
  TAccountGovernanceConfig extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Governance config account */
  governanceConfig: Address<TAccountGovernanceConfig>;
  /** Paladin stake config account */
  stakeConfig: Address<TAccountStakeConfig>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  governanceId: InitializeGovernanceInstructionDataArgs['governanceId'];
  cooldownPeriodSeconds: InitializeGovernanceInstructionDataArgs['cooldownPeriodSeconds'];
  proposalMinimumQuorum: InitializeGovernanceInstructionDataArgs['proposalMinimumQuorum'];
  proposalPassThreshold: InitializeGovernanceInstructionDataArgs['proposalPassThreshold'];
  votingPeriodSeconds: InitializeGovernanceInstructionDataArgs['votingPeriodSeconds'];
  stakePerProposal: InitializeGovernanceInstructionDataArgs['stakePerProposal'];
};

export function getInitializeGovernanceInstruction<
  TAccountGovernanceConfig extends string,
  TAccountStakeConfig extends string,
  TAccountSystemProgram extends string,
>(
  input: InitializeGovernanceInput<
    TAccountGovernanceConfig,
    TAccountStakeConfig,
    TAccountSystemProgram
  >
): InitializeGovernanceInstruction<
  typeof PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountGovernanceConfig,
  TAccountStakeConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = PALADIN_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeGovernanceInstructionDataEncoder().encode(
      args as InitializeGovernanceInstructionDataArgs
    ),
  } as InitializeGovernanceInstruction<
    typeof PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
    TAccountGovernanceConfig,
    TAccountStakeConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeGovernanceInstruction<
  TProgram extends string = typeof PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Governance config account */
    governanceConfig: TAccountMetas[0];
    /** Paladin stake config account */
    stakeConfig: TAccountMetas[1];
    /** System program */
    systemProgram: TAccountMetas[2];
  };
  data: InitializeGovernanceInstructionData;
};

export function parseInitializeGovernanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeGovernanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      governanceConfig: getNextAccount(),
      stakeConfig: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeGovernanceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
