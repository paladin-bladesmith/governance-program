/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_GOVERNANCE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type InitializeAuthorInstruction<
  TProgram extends string = typeof PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TAccountAuthor extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakeAuthority extends string
        ? ReadonlyAccount<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      TAccountAuthor extends string
        ? WritableAccount<TAccountAuthor>
        : TAccountAuthor,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeAuthorInstructionData = { discriminator: number };

export type InitializeAuthorInstructionDataArgs = {};

export function getInitializeAuthorInstructionDataEncoder(): Encoder<InitializeAuthorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getInitializeAuthorInstructionDataDecoder(): Decoder<InitializeAuthorInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializeAuthorInstructionDataCodec(): Codec<
  InitializeAuthorInstructionDataArgs,
  InitializeAuthorInstructionData
> {
  return combineCodec(
    getInitializeAuthorInstructionDataEncoder(),
    getInitializeAuthorInstructionDataDecoder()
  );
}

export type InitializeAuthorInput<
  TAccountStakeAuthority extends string = string,
  TAccountAuthor extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stakeAuthority: Address<TAccountStakeAuthority>;
  author: Address<TAccountAuthor>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeAuthorInstruction<
  TAccountStakeAuthority extends string,
  TAccountAuthor extends string,
  TAccountSystemProgram extends string,
>(
  input: InitializeAuthorInput<
    TAccountStakeAuthority,
    TAccountAuthor,
    TAccountSystemProgram
  >
): InitializeAuthorInstruction<
  typeof PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountStakeAuthority,
  TAccountAuthor,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = PALADIN_GOVERNANCE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
    author: { value: input.author ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakeAuthority),
      getAccountMeta(accounts.author),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeAuthorInstructionDataEncoder().encode({}),
  } as InitializeAuthorInstruction<
    typeof PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
    TAccountStakeAuthority,
    TAccountAuthor,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeAuthorInstruction<
  TProgram extends string = typeof PALADIN_GOVERNANCE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakeAuthority: TAccountMetas[0];
    author: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeAuthorInstructionData;
};

export function parseInitializeAuthorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeAuthorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakeAuthority: getNextAccount(),
      author: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeAuthorInstructionDataDecoder().decode(instruction.data),
  };
}
