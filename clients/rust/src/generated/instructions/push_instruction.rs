//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>

use {
    crate::generated::types::ProposalAccountMeta,
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::pubkey::Pubkey,
};

/// Accounts.
pub struct PushInstruction {
    /// Paladin stake authority account
    pub stake_authority: solana_program::pubkey::Pubkey,
    /// Proposal account
    pub proposal: solana_program::pubkey::Pubkey,
    /// Proposal transaction account
    pub proposal_transaction: solana_program::pubkey::Pubkey,
}

impl PushInstruction {
    pub fn instruction(
        &self,
        args: PushInstructionInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: PushInstructionInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.proposal,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.proposal_transaction,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = PushInstructionInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::PALADIN_GOVERNANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct PushInstructionInstructionData {
    discriminator: u8,
}

impl PushInstructionInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 1 }
    }
}

impl Default for PushInstructionInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PushInstructionInstructionArgs {
    pub instruction_program_id: Pubkey,
    pub instruction_account_metas: Vec<ProposalAccountMeta>,
    pub instruction_data: Vec<u8>,
}

/// Instruction builder for `PushInstruction`.
///
/// ### Accounts:
///
///   0. `[signer]` stake_authority
///   1. `[]` proposal
///   2. `[writable]` proposal_transaction
#[derive(Clone, Debug, Default)]
pub struct PushInstructionBuilder {
    stake_authority: Option<solana_program::pubkey::Pubkey>,
    proposal: Option<solana_program::pubkey::Pubkey>,
    proposal_transaction: Option<solana_program::pubkey::Pubkey>,
    instruction_program_id: Option<Pubkey>,
    instruction_account_metas: Option<Vec<ProposalAccountMeta>>,
    instruction_data: Option<Vec<u8>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl PushInstructionBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Paladin stake authority account
    #[inline(always)]
    pub fn stake_authority(
        &mut self,
        stake_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.stake_authority = Some(stake_authority);
        self
    }
    /// Proposal account
    #[inline(always)]
    pub fn proposal(&mut self, proposal: solana_program::pubkey::Pubkey) -> &mut Self {
        self.proposal = Some(proposal);
        self
    }
    /// Proposal transaction account
    #[inline(always)]
    pub fn proposal_transaction(
        &mut self,
        proposal_transaction: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.proposal_transaction = Some(proposal_transaction);
        self
    }
    #[inline(always)]
    pub fn instruction_program_id(&mut self, instruction_program_id: Pubkey) -> &mut Self {
        self.instruction_program_id = Some(instruction_program_id);
        self
    }
    #[inline(always)]
    pub fn instruction_account_metas(
        &mut self,
        instruction_account_metas: Vec<ProposalAccountMeta>,
    ) -> &mut Self {
        self.instruction_account_metas = Some(instruction_account_metas);
        self
    }
    #[inline(always)]
    pub fn instruction_data(&mut self, instruction_data: Vec<u8>) -> &mut Self {
        self.instruction_data = Some(instruction_data);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = PushInstruction {
            stake_authority: self.stake_authority.expect("stake_authority is not set"),
            proposal: self.proposal.expect("proposal is not set"),
            proposal_transaction: self
                .proposal_transaction
                .expect("proposal_transaction is not set"),
        };
        let args = PushInstructionInstructionArgs {
            instruction_program_id: self
                .instruction_program_id
                .clone()
                .expect("instruction_program_id is not set"),
            instruction_account_metas: self
                .instruction_account_metas
                .clone()
                .expect("instruction_account_metas is not set"),
            instruction_data: self
                .instruction_data
                .clone()
                .expect("instruction_data is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `push_instruction` CPI accounts.
pub struct PushInstructionCpiAccounts<'a, 'b> {
    /// Paladin stake authority account
    pub stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Proposal account
    pub proposal: &'b solana_program::account_info::AccountInfo<'a>,
    /// Proposal transaction account
    pub proposal_transaction: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `push_instruction` CPI instruction.
pub struct PushInstructionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Paladin stake authority account
    pub stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Proposal account
    pub proposal: &'b solana_program::account_info::AccountInfo<'a>,
    /// Proposal transaction account
    pub proposal_transaction: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: PushInstructionInstructionArgs,
}

impl<'a, 'b> PushInstructionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: PushInstructionCpiAccounts<'a, 'b>,
        args: PushInstructionInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            stake_authority: accounts.stake_authority,
            proposal: accounts.proposal,
            proposal_transaction: accounts.proposal_transaction,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.proposal.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.proposal_transaction.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = PushInstructionInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PALADIN_GOVERNANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.stake_authority.clone());
        account_infos.push(self.proposal.clone());
        account_infos.push(self.proposal_transaction.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `PushInstruction` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` stake_authority
///   1. `[]` proposal
///   2. `[writable]` proposal_transaction
#[derive(Clone, Debug)]
pub struct PushInstructionCpiBuilder<'a, 'b> {
    instruction: Box<PushInstructionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> PushInstructionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(PushInstructionCpiBuilderInstruction {
            __program: program,
            stake_authority: None,
            proposal: None,
            proposal_transaction: None,
            instruction_program_id: None,
            instruction_account_metas: None,
            instruction_data: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Paladin stake authority account
    #[inline(always)]
    pub fn stake_authority(
        &mut self,
        stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_authority = Some(stake_authority);
        self
    }
    /// Proposal account
    #[inline(always)]
    pub fn proposal(
        &mut self,
        proposal: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.proposal = Some(proposal);
        self
    }
    /// Proposal transaction account
    #[inline(always)]
    pub fn proposal_transaction(
        &mut self,
        proposal_transaction: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.proposal_transaction = Some(proposal_transaction);
        self
    }
    #[inline(always)]
    pub fn instruction_program_id(&mut self, instruction_program_id: Pubkey) -> &mut Self {
        self.instruction.instruction_program_id = Some(instruction_program_id);
        self
    }
    #[inline(always)]
    pub fn instruction_account_metas(
        &mut self,
        instruction_account_metas: Vec<ProposalAccountMeta>,
    ) -> &mut Self {
        self.instruction.instruction_account_metas = Some(instruction_account_metas);
        self
    }
    #[inline(always)]
    pub fn instruction_data(&mut self, instruction_data: Vec<u8>) -> &mut Self {
        self.instruction.instruction_data = Some(instruction_data);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool`
    /// indicating whether the account is writable or not, and a `bool`
    /// indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = PushInstructionInstructionArgs {
            instruction_program_id: self
                .instruction
                .instruction_program_id
                .clone()
                .expect("instruction_program_id is not set"),
            instruction_account_metas: self
                .instruction
                .instruction_account_metas
                .clone()
                .expect("instruction_account_metas is not set"),
            instruction_data: self
                .instruction
                .instruction_data
                .clone()
                .expect("instruction_data is not set"),
        };
        let instruction = PushInstructionCpi {
            __program: self.instruction.__program,

            stake_authority: self
                .instruction
                .stake_authority
                .expect("stake_authority is not set"),

            proposal: self.instruction.proposal.expect("proposal is not set"),

            proposal_transaction: self
                .instruction
                .proposal_transaction
                .expect("proposal_transaction is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct PushInstructionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    stake_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    proposal: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    proposal_transaction: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    instruction_program_id: Option<Pubkey>,
    instruction_account_metas: Option<Vec<ProposalAccountMeta>>,
    instruction_data: Option<Vec<u8>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
